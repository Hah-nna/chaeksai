package com.jeong.sesac.sai.ui

import android.os.Bundle
import android.util.Log
import android.view.View
import androidx.fragment.app.activityViewModels
import androidx.fragment.app.viewModels
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.LinearLayoutManager
import com.jeong.sesac.sai.databinding.FragmentHomeBinding
import com.jeong.sesac.sai.recycler.recentlyFoundNote.RecentlyFoundNoteAdapter
import com.jeong.sesac.sai.recycler.HorizontalDecoration
import com.jeong.sesac.sai.recycler.weeklyNote.WeeklyNoteAdapter
import com.jeong.sesac.sai.util.BaseFragment
import com.jeong.sesac.sai.util.WeeklyNoteMockData
import com.jeong.sesac.sai.util.throttleFirst
import com.jeong.sesac.sai.util.throttleTime
import com.jeong.sesac.sai.viewmodel.AuthViewModel
import com.jeong.sesac.sai.viewmodel.entity.LoginState
import com.jeong.sesac.sai.viewmodel.factory.AuthViewModelFactory
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.flow.launchIn
import kotlinx.coroutines.flow.onEach
import kotlinx.coroutines.launch
import ru.ldralighieri.corbind.view.clicks

class HomeFragment : BaseFragment<FragmentHomeBinding>(FragmentHomeBinding::inflate) {
    // recyclerViewAdapters
    private lateinit var weeklyNoteAdapter: WeeklyNoteAdapter
    private lateinit var recentlyFoundAdapter : RecentlyFoundNoteAdapter
    private val viewModel by activityViewModels<AuthViewModel> { AuthViewModelFactory(requireContext()) }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        weeklyNoteAdapter = WeeklyNoteAdapter { weeklyNote ->
            val action = HomeFragmentDirections.actionFragmentHomeToFragmentWeeklyNoteDetail(weeklyNote)
            findNavController().navigate(action)
        }

        recentlyFoundAdapter = RecentlyFoundNoteAdapter { foundNote ->
            val action = HomeFragmentDirections.actionFragmentHomeToFragmentRecentlyFoundNotesDetail(foundNote)

            findNavController().navigate(action)
//        requireActivity().filesDir.li
        }


        with(binding) {
            rvWeeklyNotes.apply {
                layoutManager = LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)
                adapter = this@HomeFragment.weeklyNoteAdapter
                addItemDecoration(HorizontalDecoration(requireContext()))
            }

            rvRecentlyFoundNotes.apply {
                layoutManager = LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)
                adapter = this@HomeFragment.recentlyFoundAdapter
                addItemDecoration(HorizontalDecoration(requireContext()))
            }

            /**
             * clicks() : UnitÏùÑ emitÌïòÎäî flow
             * ÌÅ¥Î¶≠ÎêòÏóàÏúºÎ©¥ unitÏùÑ emit(Î∞©Ï∂ú) -> ÌÅ¥Î¶≠ ÎêòÏóàÏùåÏùÑ Ïïå Ïàò ÏûàÏùå
             *
             * onEachÎ°ú clicks()ÎùºÎäî flowÏóêÏÑú emitÌïú unitÏóê Ìï¥Ï§Ñ ÌñâÎèôÏùÑ Î∏îÎ°ùÏïàÏóê Ï†ïÏùòÌï®
             * Ïó¨Í∏∞ÏÑúÎäî ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ïù¥Îèô
             *
             * launchIn()ÏùÄ collectÏôÄ launchÎ•º Ìï©Ïπú Í≤É
             * clicks()Îäî flowÍ≥†, ÌÑ∞ÎØ∏ÎÑê Ïó∞ÏÇ∞ÏûêÍ∞Ä ÏûàÏñ¥Ïïº Ïã§ÌñâÎê®(cold stream)
             * Í∑∏ÎûòÏÑú clicks()ÏóêÏÑú Î∞©Ï∂úÌïú Í∞íÏùÑ launchIn()ÏùÑ ÌÜµÌï¥ÏÑú Ïã§ÌñâÏãúÏºúÏ§å
             * Ïù¥Îïå Ïù∏ÏûêÎ°ú scopeÍ∞Ä Îì§Ïñ¥Í∞ê
             * viewLifecycleOwner.lifecycleScopeÎ°ú Ìïú Ïù¥Ïú†Îäî
             * ÌîÑÎûòÍ∑∏Î®ºÌä∏ Î∑∞Ïùò ÎùºÏù¥ÌîÑ ÏÇ¨Ïù¥ÌÅ¥Ïóê ÎßûÏ∂∞ ÏΩîÎ£®Ìã¥ Ïä§ÏΩîÌîÑ(ui Ïä§Î†àÎìú)Í∞Ä Ïó∞ÎèôÎêòÏñ¥ Î∑∞Ïùò ÎùºÏù¥ÌîÑ ÏÇ¨Ïù¥ÌÅ¥Ïóê ÎßûÍ≤å ÏΩîÎ£®Ìã¥ÏùÑ Ïã§ÌñâÌïòÍ≥† Í¥ÄÎ¶¨ÌïòÍ∏∞ ÏúÑÌï¥ÏÑú
             * */
            tvWeeklyNotesMore.clicks().throttleFirst(throttleTime).onEach {
                val action = HomeFragmentDirections.actionFragmentHomeToFragmentWeeklyNotes(WeeklyNoteMockData.notesList.first()
                )
                findNavController().navigate(action)
                Log.d("HOME", "Ïã§Ìñâ")
            }.launchIn(viewLifecycleOwner.lifecycleScope)

            tvRecentlyFoundNotesMore.clicks().throttleFirst(throttleTime).onEach {
                Log.d("HOME", "Ïã§Ìñâ")
                val action = HomeFragmentDirections.actionFragmentHomeToFragmentRecentlyFoundNotes()
                findNavController().navigate(action)
            }.launchIn(viewLifecycleOwner.lifecycleScope)


        }

        viewLifecycleOwner.lifecycleScope.launch {
            viewModel.loginState.collectLatest {
               when(it) {
                   is LoginState.Success -> {
            binding.tvTitle.text = "ÏïàÎÖïÌïòÏÑ∏Ïöî\n${it.data}Îãòüëãüèª"

                   }
                   else -> binding.tvTitle.text = "Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§"
               }
            }
        }
        viewModel.checkLoginState()

        weeklyNoteAdapter.submitList(WeeklyNoteMockData.notesList)
        recentlyFoundAdapter.submitList(WeeklyNoteMockData.notesList)
    }



}